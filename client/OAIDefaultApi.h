/**
 * Cavoke
 * API for cavoke interaction between main server and clients
 *
 * The version of the OpenAPI document: 0.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGameInfo.h"
#include "OAIGameMove.h"
#include "OAIGameState.h"
#include "OAIGameStatistics.h"
#include "OAIHttpFileElement.h"
#include "OAIRoomInfo.h"
#include "OAISessionInfo.h"
#include "OAIUser.h"
#include "OAIUserGameStatistics.h"
#include "OAIUserStatistics.h"
#include "OAIValidationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  new_role qint32 [required]
    * @param[in]  user_id QString [optional]
    */
    void changeRole(const QString &session_id, const qint32 &new_role, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    */
    void configGame(const QString &game_id);

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void createSession(const QString &game_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    */
    void downloadClient(const QString &game_id);

    /**
    * @param[in]  game_id QString [required]
    */
    void gameStatistics(const QString &game_id);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void getUpdate(const QString &session_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());


    void health();

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  position qint32 [optional]
    * @param[in]  user_id QString [optional]
    */
    void joinSession(const QString &session_id, const ::OpenAPI::OptionalParam<qint32> &position = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void leaveSession(const QString &session_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());


    void listGames();

    /**
    * @param[in]  new_name QString [required]
    * @param[in]  user_id QString [optional]
    */
    void profileChangeNamePost(const QString &new_name, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [optional]
    */
    void profileGetMeGet(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  display_name QString [required]
    * @param[in]  user_id QString [optional]
    */
    void roomCreate(const QString &display_name, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void roomInfo(const QString &room_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  invite_code QString [required]
    * @param[in]  user_id QString [optional]
    */
    void roomInfoByCode(const QString &invite_code, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  invite_code QString [required]
    * @param[in]  user_id QString [optional]
    */
    void roomJoin(const QString &invite_code, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void roomLeave(const QString &room_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id QString [required]
    * @param[in]  game_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void roomNewSession(const QString &room_id, const QString &game_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  oai_game_move OAIGameMove [optional]
    */
    void sendMove(const QString &session_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGameMove> &oai_game_move = ::OpenAPI::OptionalParam<OAIGameMove>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void sessionInfo(const QString &session_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void startSession(const QString &session_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [optional]
    * @param[in]  display_name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  git_repo QString [optional]
    * @param[in]  client_zip OAIHttpFileElement [optional]
    * @param[in]  server_zip OAIHttpFileElement [optional]
    */
    void submitGame(const ::OpenAPI::OptionalParam<QString> &game_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &git_repo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &client_zip = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &server_zip = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  user_id QString [optional]
    */
    void userAuthStatistics(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void userGameAuthStatistics(const QString &game_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  game_id QString [required]
    */
    void userGameStatistics(const QString &user_id, const QString &game_id);

    /**
    * @param[in]  user_id QString [required]
    */
    void userStatistics(const QString &user_id);

    /**
    * @param[in]  req_user_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void usersGetUserGet(const QString &req_user_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    void validateSession(const QString &session_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeRoleCallback(OAIHttpRequestWorker *worker);
    void configGameCallback(OAIHttpRequestWorker *worker);
    void createSessionCallback(OAIHttpRequestWorker *worker);
    void downloadClientCallback(OAIHttpRequestWorker *worker);
    void gameStatisticsCallback(OAIHttpRequestWorker *worker);
    void getUpdateCallback(OAIHttpRequestWorker *worker);
    void healthCallback(OAIHttpRequestWorker *worker);
    void joinSessionCallback(OAIHttpRequestWorker *worker);
    void leaveSessionCallback(OAIHttpRequestWorker *worker);
    void listGamesCallback(OAIHttpRequestWorker *worker);
    void profileChangeNamePostCallback(OAIHttpRequestWorker *worker);
    void profileGetMeGetCallback(OAIHttpRequestWorker *worker);
    void roomCreateCallback(OAIHttpRequestWorker *worker);
    void roomInfoCallback(OAIHttpRequestWorker *worker);
    void roomInfoByCodeCallback(OAIHttpRequestWorker *worker);
    void roomJoinCallback(OAIHttpRequestWorker *worker);
    void roomLeaveCallback(OAIHttpRequestWorker *worker);
    void roomNewSessionCallback(OAIHttpRequestWorker *worker);
    void sendMoveCallback(OAIHttpRequestWorker *worker);
    void sessionInfoCallback(OAIHttpRequestWorker *worker);
    void startSessionCallback(OAIHttpRequestWorker *worker);
    void submitGameCallback(OAIHttpRequestWorker *worker);
    void userAuthStatisticsCallback(OAIHttpRequestWorker *worker);
    void userGameAuthStatisticsCallback(OAIHttpRequestWorker *worker);
    void userGameStatisticsCallback(OAIHttpRequestWorker *worker);
    void userStatisticsCallback(OAIHttpRequestWorker *worker);
    void usersGetUserGetCallback(OAIHttpRequestWorker *worker);
    void validateSessionCallback(OAIHttpRequestWorker *worker);

signals:

    void changeRoleSignal();
    void configGameSignal(OAIGameInfo summary);
    void createSessionSignal(OAISessionInfo summary);
    void downloadClientSignal(OAIHttpFileElement summary);
    void gameStatisticsSignal(OAIGameStatistics summary);
    void getUpdateSignal(OAIGameState summary);
    void healthSignal(QString summary);
    void joinSessionSignal(OAISessionInfo summary);
    void leaveSessionSignal();
    void listGamesSignal(QList<OAIGameInfo> summary);
    void profileChangeNamePostSignal(OAIUser summary);
    void profileGetMeGetSignal(OAIUser summary);
    void roomCreateSignal(OAIRoomInfo summary);
    void roomInfoSignal(OAIRoomInfo summary);
    void roomInfoByCodeSignal(OAIRoomInfo summary);
    void roomJoinSignal(OAIRoomInfo summary);
    void roomLeaveSignal();
    void roomNewSessionSignal(OAISessionInfo summary);
    void sendMoveSignal();
    void sessionInfoSignal(OAISessionInfo summary);
    void startSessionSignal();
    void submitGameSignal();
    void userAuthStatisticsSignal(OAIUserStatistics summary);
    void userGameAuthStatisticsSignal(OAIUserGameStatistics summary);
    void userGameStatisticsSignal(OAIUserGameStatistics summary);
    void userStatisticsSignal(OAIUserStatistics summary);
    void usersGetUserGetSignal(OAIUser summary);
    void validateSessionSignal(OAIValidationResult summary);

    void changeRoleSignalFull(OAIHttpRequestWorker *worker);
    void configGameSignalFull(OAIHttpRequestWorker *worker, OAIGameInfo summary);
    void createSessionSignalFull(OAIHttpRequestWorker *worker, OAISessionInfo summary);
    void downloadClientSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void gameStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIGameStatistics summary);
    void getUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGameState summary);
    void healthSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void joinSessionSignalFull(OAIHttpRequestWorker *worker, OAISessionInfo summary);
    void leaveSessionSignalFull(OAIHttpRequestWorker *worker);
    void listGamesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGameInfo> summary);
    void profileChangeNamePostSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void profileGetMeGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void roomCreateSignalFull(OAIHttpRequestWorker *worker, OAIRoomInfo summary);
    void roomInfoSignalFull(OAIHttpRequestWorker *worker, OAIRoomInfo summary);
    void roomInfoByCodeSignalFull(OAIHttpRequestWorker *worker, OAIRoomInfo summary);
    void roomJoinSignalFull(OAIHttpRequestWorker *worker, OAIRoomInfo summary);
    void roomLeaveSignalFull(OAIHttpRequestWorker *worker);
    void roomNewSessionSignalFull(OAIHttpRequestWorker *worker, OAISessionInfo summary);
    void sendMoveSignalFull(OAIHttpRequestWorker *worker);
    void sessionInfoSignalFull(OAIHttpRequestWorker *worker, OAISessionInfo summary);
    void startSessionSignalFull(OAIHttpRequestWorker *worker);
    void submitGameSignalFull(OAIHttpRequestWorker *worker);
    void userAuthStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIUserStatistics summary);
    void userGameAuthStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIUserGameStatistics summary);
    void userGameStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIUserGameStatistics summary);
    void userStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIUserStatistics summary);
    void usersGetUserGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void validateSessionSignalFull(OAIHttpRequestWorker *worker, OAIValidationResult summary);

    void changeRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configGameSignalE(OAIGameInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionSignalE(OAISessionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadClientSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatisticsSignalE(OAIGameStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdateSignalE(OAIGameState summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void joinSessionSignalE(OAISessionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leaveSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listGamesSignalE(QList<OAIGameInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profileChangeNamePostSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profileGetMeGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomCreateSignalE(OAIRoomInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomInfoSignalE(OAIRoomInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomInfoByCodeSignalE(OAIRoomInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomJoinSignalE(OAIRoomInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roomLeaveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void roomNewSessionSignalE(OAISessionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sessionInfoSignalE(OAISessionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void submitGameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userAuthStatisticsSignalE(OAIUserStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGameAuthStatisticsSignalE(OAIUserGameStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGameStatisticsSignalE(OAIUserGameStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userStatisticsSignalE(OAIUserStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUserGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSessionSignalE(OAIValidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);

    void changeRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configGameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void joinSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaveSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profileChangeNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profileGetMeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomInfoByCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomJoinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomLeaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roomNewSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitGameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAuthStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGameAuthStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGameStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
