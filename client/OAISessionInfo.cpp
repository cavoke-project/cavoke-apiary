/**
 * Cavoke
 * API for cavoke interaction between main server and clients
 *
 * The version of the OpenAPI document: 0.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionInfo::OAISessionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionInfo::OAISessionInfo() {
    this->initializeModel();
}

OAISessionInfo::~OAISessionInfo() {}

void OAISessionInfo::initializeModel() {

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_host_id_isSet = false;
    m_host_id_isValid = false;

    m_players_isSet = false;
    m_players_isValid = false;
}

void OAISessionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionInfo::fromJsonObject(QJsonObject json) {

    m_session_id_isValid = ::OpenAPI::fromJsonValue(session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(game_id, json[QString("game_id")]);
    m_game_id_isSet = !json[QString("game_id")].isNull() && m_game_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_host_id_isValid = ::OpenAPI::fromJsonValue(host_id, json[QString("host_id")]);
    m_host_id_isSet = !json[QString("host_id")].isNull() && m_host_id_isValid;

    m_players_isValid = ::OpenAPI::fromJsonValue(players, json[QString("players")]);
    m_players_isSet = !json[QString("players")].isNull() && m_players_isValid;
}

QString OAISessionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(session_id));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("game_id"), ::OpenAPI::toJsonValue(game_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_host_id_isSet) {
        obj.insert(QString("host_id"), ::OpenAPI::toJsonValue(host_id));
    }
    if (players.size() > 0) {
        obj.insert(QString("players"), ::OpenAPI::toJsonValue(players));
    }
    return obj;
}

QString OAISessionInfo::getSessionId() const {
    return session_id;
}
void OAISessionInfo::setSessionId(const QString &session_id) {
    this->session_id = session_id;
    this->m_session_id_isSet = true;
}

bool OAISessionInfo::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAISessionInfo::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAISessionInfo::getGameId() const {
    return game_id;
}
void OAISessionInfo::setGameId(const QString &game_id) {
    this->game_id = game_id;
    this->m_game_id_isSet = true;
}

bool OAISessionInfo::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAISessionInfo::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAISessionInfo::getStatus() const {
    return status;
}
void OAISessionInfo::setStatus(const qint32 &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAISessionInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAISessionInfo::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISessionInfo::getHostId() const {
    return host_id;
}
void OAISessionInfo::setHostId(const QString &host_id) {
    this->host_id = host_id;
    this->m_host_id_isSet = true;
}

bool OAISessionInfo::is_host_id_Set() const{
    return m_host_id_isSet;
}

bool OAISessionInfo::is_host_id_Valid() const{
    return m_host_id_isValid;
}

QList<OAIPlayer> OAISessionInfo::getPlayers() const {
    return players;
}
void OAISessionInfo::setPlayers(const QList<OAIPlayer> &players) {
    this->players = players;
    this->m_players_isSet = true;
}

bool OAISessionInfo::is_players_Set() const{
    return m_players_isSet;
}

bool OAISessionInfo::is_players_Valid() const{
    return m_players_isValid;
}

bool OAISessionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (players.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_session_id_isValid && m_game_id_isValid && m_status_isValid && m_host_id_isValid && m_players_isValid && true;
}

} // namespace OpenAPI
