/**
 * Cavoke
 * API for cavoke interaction between main server and clients
 *
 * The version of the OpenAPI document: 0.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionCreationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionCreationRequest::OAISessionCreationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionCreationRequest::OAISessionCreationRequest() {
    this->initializeModel();
}

OAISessionCreationRequest::~OAISessionCreationRequest() {}

void OAISessionCreationRequest::initializeModel() {

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_game_configuration_isSet = false;
    m_game_configuration_isValid = false;

    m_players_isSet = false;
    m_players_isValid = false;
}

void OAISessionCreationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionCreationRequest::fromJsonObject(QJsonObject json) {

    m_game_id_isValid = ::OpenAPI::fromJsonValue(game_id, json[QString("game_id")]);
    m_game_id_isSet = !json[QString("game_id")].isNull() && m_game_id_isValid;

    m_game_configuration_isValid = ::OpenAPI::fromJsonValue(game_configuration, json[QString("game_configuration")]);
    m_game_configuration_isSet = !json[QString("game_configuration")].isNull() && m_game_configuration_isValid;

    m_players_isValid = ::OpenAPI::fromJsonValue(players, json[QString("players")]);
    m_players_isSet = !json[QString("players")].isNull() && m_players_isValid;
}

QString OAISessionCreationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionCreationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_game_id_isSet) {
        obj.insert(QString("game_id"), ::OpenAPI::toJsonValue(game_id));
    }
    if (m_game_configuration_isSet) {
        obj.insert(QString("game_configuration"), ::OpenAPI::toJsonValue(game_configuration));
    }
    if (players.size() > 0) {
        obj.insert(QString("players"), ::OpenAPI::toJsonValue(players));
    }
    return obj;
}

QString OAISessionCreationRequest::getGameId() const {
    return game_id;
}
void OAISessionCreationRequest::setGameId(const QString &game_id) {
    this->game_id = game_id;
    this->m_game_id_isSet = true;
}

bool OAISessionCreationRequest::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAISessionCreationRequest::is_game_id_Valid() const{
    return m_game_id_isValid;
}

QString OAISessionCreationRequest::getGameConfiguration() const {
    return game_configuration;
}
void OAISessionCreationRequest::setGameConfiguration(const QString &game_configuration) {
    this->game_configuration = game_configuration;
    this->m_game_configuration_isSet = true;
}

bool OAISessionCreationRequest::is_game_configuration_Set() const{
    return m_game_configuration_isSet;
}

bool OAISessionCreationRequest::is_game_configuration_Valid() const{
    return m_game_configuration_isValid;
}

QList<OAIPlayer> OAISessionCreationRequest::getPlayers() const {
    return players;
}
void OAISessionCreationRequest::setPlayers(const QList<OAIPlayer> &players) {
    this->players = players;
    this->m_players_isSet = true;
}

bool OAISessionCreationRequest::is_players_Set() const{
    return m_players_isSet;
}

bool OAISessionCreationRequest::is_players_Valid() const{
    return m_players_isValid;
}

bool OAISessionCreationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (players.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionCreationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_game_id_isValid && m_game_configuration_isValid && m_players_isValid && true;
}

} // namespace OpenAPI
