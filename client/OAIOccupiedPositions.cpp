/**
 * Cavoke
 * API for cavoke interaction between main server and clients
 *
 * The version of the OpenAPI document: 0.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOccupiedPositions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOccupiedPositions::OAIOccupiedPositions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOccupiedPositions::OAIOccupiedPositions() {
    this->initializeModel();
}

OAIOccupiedPositions::~OAIOccupiedPositions() {}

void OAIOccupiedPositions::initializeModel() {

    m_max_players_isSet = false;
    m_max_players_isValid = false;

    m_occupied_isSet = false;
    m_occupied_isValid = false;
}

void OAIOccupiedPositions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOccupiedPositions::fromJsonObject(QJsonObject json) {

    m_max_players_isValid = ::OpenAPI::fromJsonValue(max_players, json[QString("max_players")]);
    m_max_players_isSet = !json[QString("max_players")].isNull() && m_max_players_isValid;

    m_occupied_isValid = ::OpenAPI::fromJsonValue(occupied, json[QString("occupied")]);
    m_occupied_isSet = !json[QString("occupied")].isNull() && m_occupied_isValid;
}

QString OAIOccupiedPositions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOccupiedPositions::asJsonObject() const {
    QJsonObject obj;
    if (m_max_players_isSet) {
        obj.insert(QString("max_players"), ::OpenAPI::toJsonValue(max_players));
    }
    if (occupied.size() > 0) {
        obj.insert(QString("occupied"), ::OpenAPI::toJsonValue(occupied));
    }
    return obj;
}

qint32 OAIOccupiedPositions::getMaxPlayers() const {
    return max_players;
}
void OAIOccupiedPositions::setMaxPlayers(const qint32 &max_players) {
    this->max_players = max_players;
    this->m_max_players_isSet = true;
}

bool OAIOccupiedPositions::is_max_players_Set() const{
    return m_max_players_isSet;
}

bool OAIOccupiedPositions::is_max_players_Valid() const{
    return m_max_players_isValid;
}

QList<OAIPlayer> OAIOccupiedPositions::getOccupied() const {
    return occupied;
}
void OAIOccupiedPositions::setOccupied(const QList<OAIPlayer> &occupied) {
    this->occupied = occupied;
    this->m_occupied_isSet = true;
}

bool OAIOccupiedPositions::is_occupied_Set() const{
    return m_occupied_isSet;
}

bool OAIOccupiedPositions::is_occupied_Valid() const{
    return m_occupied_isValid;
}

bool OAIOccupiedPositions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_players_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (occupied.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOccupiedPositions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
