/**
 * Cavoke
 * API for cavoke interaction between main server and clients
 *
 * The version of the OpenAPI document: 0.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserGameStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserGameStatistics::OAIUserGameStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserGameStatistics::OAIUserGameStatistics() {
    this->initializeModel();
}

OAIUserGameStatistics::~OAIUserGameStatistics() {}

void OAIUserGameStatistics::initializeModel() {

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_time_played_sec_isSet = false;
    m_time_played_sec_isValid = false;

    m_games_played_isSet = false;
    m_games_played_isValid = false;

    m_win_rate_isSet = false;
    m_win_rate_isValid = false;
}

void OAIUserGameStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserGameStatistics::fromJsonObject(QJsonObject json) {

    m_game_id_isValid = ::OpenAPI::fromJsonValue(game_id, json[QString("game_id")]);
    m_game_id_isSet = !json[QString("game_id")].isNull() && m_game_id_isValid;

    m_time_played_sec_isValid = ::OpenAPI::fromJsonValue(time_played_sec, json[QString("time_played_sec")]);
    m_time_played_sec_isSet = !json[QString("time_played_sec")].isNull() && m_time_played_sec_isValid;

    m_games_played_isValid = ::OpenAPI::fromJsonValue(games_played, json[QString("games_played")]);
    m_games_played_isSet = !json[QString("games_played")].isNull() && m_games_played_isValid;

    m_win_rate_isValid = ::OpenAPI::fromJsonValue(win_rate, json[QString("win_rate")]);
    m_win_rate_isSet = !json[QString("win_rate")].isNull() && m_win_rate_isValid;
}

QString OAIUserGameStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserGameStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_game_id_isSet) {
        obj.insert(QString("game_id"), ::OpenAPI::toJsonValue(game_id));
    }
    if (m_time_played_sec_isSet) {
        obj.insert(QString("time_played_sec"), ::OpenAPI::toJsonValue(time_played_sec));
    }
    if (m_games_played_isSet) {
        obj.insert(QString("games_played"), ::OpenAPI::toJsonValue(games_played));
    }
    if (m_win_rate_isSet) {
        obj.insert(QString("win_rate"), ::OpenAPI::toJsonValue(win_rate));
    }
    return obj;
}

QString OAIUserGameStatistics::getGameId() const {
    return game_id;
}
void OAIUserGameStatistics::setGameId(const QString &game_id) {
    this->game_id = game_id;
    this->m_game_id_isSet = true;
}

bool OAIUserGameStatistics::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIUserGameStatistics::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIUserGameStatistics::getTimePlayedSec() const {
    return time_played_sec;
}
void OAIUserGameStatistics::setTimePlayedSec(const qint32 &time_played_sec) {
    this->time_played_sec = time_played_sec;
    this->m_time_played_sec_isSet = true;
}

bool OAIUserGameStatistics::is_time_played_sec_Set() const{
    return m_time_played_sec_isSet;
}

bool OAIUserGameStatistics::is_time_played_sec_Valid() const{
    return m_time_played_sec_isValid;
}

qint32 OAIUserGameStatistics::getGamesPlayed() const {
    return games_played;
}
void OAIUserGameStatistics::setGamesPlayed(const qint32 &games_played) {
    this->games_played = games_played;
    this->m_games_played_isSet = true;
}

bool OAIUserGameStatistics::is_games_played_Set() const{
    return m_games_played_isSet;
}

bool OAIUserGameStatistics::is_games_played_Valid() const{
    return m_games_played_isValid;
}

double OAIUserGameStatistics::getWinRate() const {
    return win_rate;
}
void OAIUserGameStatistics::setWinRate(const double &win_rate) {
    this->win_rate = win_rate;
    this->m_win_rate_isSet = true;
}

bool OAIUserGameStatistics::is_win_rate_Set() const{
    return m_win_rate_isSet;
}

bool OAIUserGameStatistics::is_win_rate_Valid() const{
    return m_win_rate_isValid;
}

bool OAIUserGameStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_played_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_win_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserGameStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
