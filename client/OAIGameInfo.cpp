/**
 * Cavoke
 * API for cavoke interaction between main server and clients
 *
 * The version of the OpenAPI document: 0.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameInfo::OAIGameInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameInfo::OAIGameInfo() {
    this->initializeModel();
}

OAIGameInfo::~OAIGameInfo() {}

void OAIGameInfo::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_players_num_isSet = false;
    m_players_num_isValid = false;

    m_role_names_isSet = false;
    m_role_names_isValid = false;
}

void OAIGameInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameInfo::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_players_num_isValid = ::OpenAPI::fromJsonValue(players_num, json[QString("players_num")]);
    m_players_num_isSet = !json[QString("players_num")].isNull() && m_players_num_isValid;

    m_role_names_isValid = ::OpenAPI::fromJsonValue(role_names, json[QString("role_names")]);
    m_role_names_isSet = !json[QString("role_names")].isNull() && m_role_names_isValid;
}

QString OAIGameInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_players_num_isSet) {
        obj.insert(QString("players_num"), ::OpenAPI::toJsonValue(players_num));
    }
    if (role_names.size() > 0) {
        obj.insert(QString("role_names"), ::OpenAPI::toJsonValue(role_names));
    }
    return obj;
}

QString OAIGameInfo::getId() const {
    return id;
}
void OAIGameInfo::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIGameInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGameInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGameInfo::getDisplayName() const {
    return display_name;
}
void OAIGameInfo::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

bool OAIGameInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGameInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGameInfo::getDescription() const {
    return description;
}
void OAIGameInfo::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIGameInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGameInfo::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGameInfo::getPlayersNum() const {
    return players_num;
}
void OAIGameInfo::setPlayersNum(const qint32 &players_num) {
    this->players_num = players_num;
    this->m_players_num_isSet = true;
}

bool OAIGameInfo::is_players_num_Set() const{
    return m_players_num_isSet;
}

bool OAIGameInfo::is_players_num_Valid() const{
    return m_players_num_isValid;
}

QList<QString> OAIGameInfo::getRoleNames() const {
    return role_names;
}
void OAIGameInfo::setRoleNames(const QList<QString> &role_names) {
    this->role_names = role_names;
    this->m_role_names_isSet = true;
}

bool OAIGameInfo::is_role_names_Set() const{
    return m_role_names_isSet;
}

bool OAIGameInfo::is_role_names_Valid() const{
    return m_role_names_isValid;
}

bool OAIGameInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_players_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (role_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_display_name_isValid && m_description_isValid && m_players_num_isValid && m_role_names_isValid && true;
}

} // namespace OpenAPI
