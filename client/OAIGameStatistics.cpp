/**
 * Cavoke
 * API for cavoke interaction between main server and clients
 *
 * The version of the OpenAPI document: 0.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameStatistics::OAIGameStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameStatistics::OAIGameStatistics() {
    this->initializeModel();
}

OAIGameStatistics::~OAIGameStatistics() {}

void OAIGameStatistics::initializeModel() {

    m_average_duration_sec_isSet = false;
    m_average_duration_sec_isValid = false;

    m_average_players_count_isSet = false;
    m_average_players_count_isValid = false;

    m_total_time_played_sec_isSet = false;
    m_total_time_played_sec_isValid = false;

    m_total_games_played_isSet = false;
    m_total_games_played_isValid = false;
}

void OAIGameStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameStatistics::fromJsonObject(QJsonObject json) {

    m_average_duration_sec_isValid = ::OpenAPI::fromJsonValue(average_duration_sec, json[QString("average_duration_sec")]);
    m_average_duration_sec_isSet = !json[QString("average_duration_sec")].isNull() && m_average_duration_sec_isValid;

    m_average_players_count_isValid = ::OpenAPI::fromJsonValue(average_players_count, json[QString("average_players_count")]);
    m_average_players_count_isSet = !json[QString("average_players_count")].isNull() && m_average_players_count_isValid;

    m_total_time_played_sec_isValid = ::OpenAPI::fromJsonValue(total_time_played_sec, json[QString("total_time_played_sec")]);
    m_total_time_played_sec_isSet = !json[QString("total_time_played_sec")].isNull() && m_total_time_played_sec_isValid;

    m_total_games_played_isValid = ::OpenAPI::fromJsonValue(total_games_played, json[QString("total_games_played")]);
    m_total_games_played_isSet = !json[QString("total_games_played")].isNull() && m_total_games_played_isValid;
}

QString OAIGameStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_average_duration_sec_isSet) {
        obj.insert(QString("average_duration_sec"), ::OpenAPI::toJsonValue(average_duration_sec));
    }
    if (m_average_players_count_isSet) {
        obj.insert(QString("average_players_count"), ::OpenAPI::toJsonValue(average_players_count));
    }
    if (m_total_time_played_sec_isSet) {
        obj.insert(QString("total_time_played_sec"), ::OpenAPI::toJsonValue(total_time_played_sec));
    }
    if (m_total_games_played_isSet) {
        obj.insert(QString("total_games_played"), ::OpenAPI::toJsonValue(total_games_played));
    }
    return obj;
}

qint32 OAIGameStatistics::getAverageDurationSec() const {
    return average_duration_sec;
}
void OAIGameStatistics::setAverageDurationSec(const qint32 &average_duration_sec) {
    this->average_duration_sec = average_duration_sec;
    this->m_average_duration_sec_isSet = true;
}

bool OAIGameStatistics::is_average_duration_sec_Set() const{
    return m_average_duration_sec_isSet;
}

bool OAIGameStatistics::is_average_duration_sec_Valid() const{
    return m_average_duration_sec_isValid;
}

qint32 OAIGameStatistics::getAveragePlayersCount() const {
    return average_players_count;
}
void OAIGameStatistics::setAveragePlayersCount(const qint32 &average_players_count) {
    this->average_players_count = average_players_count;
    this->m_average_players_count_isSet = true;
}

bool OAIGameStatistics::is_average_players_count_Set() const{
    return m_average_players_count_isSet;
}

bool OAIGameStatistics::is_average_players_count_Valid() const{
    return m_average_players_count_isValid;
}

qint32 OAIGameStatistics::getTotalTimePlayedSec() const {
    return total_time_played_sec;
}
void OAIGameStatistics::setTotalTimePlayedSec(const qint32 &total_time_played_sec) {
    this->total_time_played_sec = total_time_played_sec;
    this->m_total_time_played_sec_isSet = true;
}

bool OAIGameStatistics::is_total_time_played_sec_Set() const{
    return m_total_time_played_sec_isSet;
}

bool OAIGameStatistics::is_total_time_played_sec_Valid() const{
    return m_total_time_played_sec_isValid;
}

qint32 OAIGameStatistics::getTotalGamesPlayed() const {
    return total_games_played;
}
void OAIGameStatistics::setTotalGamesPlayed(const qint32 &total_games_played) {
    this->total_games_played = total_games_played;
    this->m_total_games_played_isSet = true;
}

bool OAIGameStatistics::is_total_games_played_Set() const{
    return m_total_games_played_isSet;
}

bool OAIGameStatistics::is_total_games_played_Valid() const{
    return m_total_games_played_isValid;
}

bool OAIGameStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_duration_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_players_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_played_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_games_played_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
